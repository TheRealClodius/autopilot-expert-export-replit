#!/usr/bin/env python3

"""
Test Unknown Action Fix

This script replicates the exact production scenario causing "Unknown action" errors
and verifies the fix resolves the issue.
"""

import asyncio
import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from agents.orchestrator_agent import OrchestratorAgent
from models.schemas import ProcessedMessage
from services.memory_service import MemoryService

async def test_unknown_action_fix():
    """Test the fix for unknown action errors in production"""
    print("üîß Testing Unknown Action Fix...")
    
    try:
        # Initialize memory service and orchestrator
        memory_service = MemoryService()
        orchestrator = OrchestratorAgent(memory_service)
        
        # Create test message that was failing in production
        test_message = ProcessedMessage(
            text="Can you make me understand what autopilot for everyone is trying to achieve for 24.10?",
            user_id="U_TEST_USER",
            channel_id="C_TEST_CHANNEL", 
            message_ts="1234567890.123456",
            thread_ts=None,
            user_first_name="Test",
            user_display_name="Test User",
            user_title="Developer",
            user_department="Engineering"
        )
        
        # Test the exact action format generated by the orchestrator
        test_action = {
            "mcp_tool": "confluence_search",
            "arguments": {
                "query": "autopilot for everyone 24.10",
                "limit": 10
            }
        }
        
        print(f"Testing action: {test_action}")
        
        # Execute the action directly
        result = await orchestrator._execute_single_tool_action("atlassian", test_action)
        
        if result and not result.get("error"):
            print("‚úÖ SUCCESS: Unknown action error fixed!")
            print(f"   Result type: {type(result)}")
            if isinstance(result, dict):
                if result.get("success"):
                    data = result.get("result", [])
                    print(f"   Retrieved {len(data) if isinstance(data, list) else 'unknown count'} results")
                else:
                    print(f"   Result status: {result}")
            return True
        else:
            print(f"‚ùå STILL FAILING: {result}")
            return False
            
    except Exception as e:
        print(f"‚ùå EXCEPTION: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    asyncio.run(test_unknown_action_fix())